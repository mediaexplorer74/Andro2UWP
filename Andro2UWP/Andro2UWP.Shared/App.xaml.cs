// App
// Shared code
// 2022

using Andro2UWP.Models;
using Microsoft.Extensions.Logging;
using Microsoft.Graph;
using Microsoft.OneDrive.Sdk;
using Microsoft.OneDrive.Sdk.Authentication;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.ApplicationModel;
using Windows.ApplicationModel.Activation;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

namespace Andro2UWP
{

    sealed partial class App : Application
    {

        public enum ClientType
        {
            Business,
            Consumer,
            ConsumerUwp
        }

        //RnD
        //public Frame rootFrame;
        public ObservableCollection<ItemModel> Items { get; set; }

        //public List<ItemModel> NavigationStack { get; set; }

        public Microsoft.OneDrive.Sdk.IOneDriveClient uOneDriveClient { get; set; }

        public IAuthenticationProvider AuthProvider { get; set; }

        public readonly static string oneDriveConsumerClientId = "560b76b6-f929-4200-b8b0-70892f08f94a";//"Insert your OneDrive Consumer client id";
        //public readonly static string oneDriveConsumerClientId = "4a1aa1d5-c567-49d0-ad0b-cd957a47f842";
        //public readonly static string oneDriveConsumerClientId = "a643bcca-2548-4793-aa1c-826a430680f4";


        public readonly static string oneDriveConsumerReturnUrl = "msal560b76b6-f929-4200-b8b0-70892f08f94a://auth";//"https://login.live.com/oauth20_desktop.srf";
        //public readonly static string oneDriveConsumerReturnUrl = "https://login.live.com/oauth20_desktop.srf"; // test it !
        //public readonly static string oneDriveConsumerReturnUrl = "https://login.live.com/oauth20_desktop.srf";

        public readonly static string oneDriveConsumerBaseUrl = "https://api.onedrive.com/v1.0";

        public readonly static string[] scopes = new string[]
        {
           "onedrive.readonly", // allow onedrive read only mode
            "onedrive.appfolder", // allow to read-write ops for app folder only (?)
            "wl.signin",
            "offline_access"
        };

        // ***
        public static List<JedenToast> sToasts = new List<JedenToast>();
        public static string gsDeviceName = "default";
        public static bool gbCatch = false;
        public static int giCurrentNumber = 0;

        public static Dictionary<string, string> gdSenderRenames = new Dictionary<string, string>();
        public static List<JedenFiltr> glFilters = new List<JedenFiltr>();
        // ***


        #region "autogenerated"
        public App()
        {

            ConfigureFilters(global::Uno.Extensions.LogExtensionPoint.AmbientLoggerFactory);

            // RnD
            //this.NavigationStack = new List<ItemModel>();

            this.InitializeComponent();

            //this.Suspending += OnSuspending;
        }

        protected override void OnLaunched(LaunchActivatedEventArgs e)
        {
#if DEBUG
            if (System.Diagnostics.Debugger.IsAttached)
            {
                // this.DebugSettings.EnableFrameRateCounter = true;
            }
#endif
            //Frame 
            Frame rootFrame = Windows.UI.Xaml.Window.Current.Content as Frame;

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active
            if (rootFrame == null)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame();

                rootFrame.NavigationFailed += OnNavigationFailed;

                // PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
                rootFrame.Navigated += OnNavigatedAddBackButton;

                Windows.UI.Core.SystemNavigationManager.GetForCurrentView().BackRequested += OnBackButtonPressed;

                //if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
                //{
                //    //TODO: Load state from previously suspended application
                //}

                // Place the frame in the current Window
                Windows.UI.Xaml.Window.Current.Content = rootFrame;
            }

#if !__ANDROID__ //#if NETFX_CORE
            if (e.PrelaunchActivated != false) return;
#endif

            if (rootFrame.Content == null)
            {
                // When the navigation stack isn't restored navigate to the first page,
                // configuring the new page by passing required information as a navigation
                // parameter

                // RnD
                //rootFrame.Navigate(typeof(MainPage), e.Arguments);
                //rootFrame.Navigate(typeof(AccountSelectionPage), e.Arguments);

                // -- 1 --
                //OD sign off if needed
                SighOffIfNeeded();


                // -- 2 --
                //OD sign in if needed
                SighInIfNeeded(ClientType.Consumer, e);


                //    -- 3 --
                // go to Main page
                rootFrame.Navigate(typeof(MainPage), e.Arguments);

            }

            // Ensure the current window is active
            Windows.UI.Xaml.Window.Current.Activate();

        }//OnLanched end


        // ... async - off

        public void SighOffIfNeeded()
        {
            App app = ((App)Application.Current);

            if (app.uOneDriveClient != null)
            {
                MsaAuthenticationProvider msaAuthProvider =
                    app.AuthProvider as MsaAuthenticationProvider;
                //var adalAuthProvider = app.AuthProvider as AdalAuthenticationProvider;

                if (msaAuthProvider != null)
                {
                    //await 
                    msaAuthProvider.SignOutAsync();
                }
                //else if (adalAuthProvider != null)
                //{
                //    await adalAuthProvider.SignOutAsync();
                //}

                app.uOneDriveClient = null;
            }

        }//SignOffIfNeeded


        // ... async - off

        public async void SighInIfNeeded(ClientType clientType, LaunchActivatedEventArgs e)
        {
            Frame rootFrame = Windows.UI.Xaml.Window.Current.Content as Frame;

            var app = (App)Application.Current;

            if (app.uOneDriveClient == null)
            {
                Task authTask;

                // Case "clientType -> ClientType.Consumer" (simple MSA login)

#if !__ANDROID__
                MsaAuthenticationProvider msaAuthProvider = 
                new MsaAuthenticationProvider
                (
                    oneDriveConsumerClientId, 
                    oneDriveConsumerReturnUrl, 
                    scopes, 
                    new CredentialVault(oneDriveConsumerClientId) 
                );
#else

                Android.Content.Context ctxt = Android.App.Application.Context;

                var msaAuthProvider = new MsaAuthenticationProvider
                (
                    ctxt,
                    oneDriveConsumerClientId, // this.
                    oneDriveConsumerReturnUrl, // this.
                    scopes, // this.
                    new CredentialVault(oneDriveConsumerClientId) // this.
                );
#endif

                authTask = msaAuthProvider.RestoreMostRecentFromCacheOrAuthenticateUserAsync();

               
                app.uOneDriveClient =
                    new OneDriveClient
                    (
                        oneDriveConsumerBaseUrl, 
                        msaAuthProvider
                    );

                app.AuthProvider = msaAuthProvider; 

                try
                {
                    await authTask;

                    // RnD : error hadling
                    //app.NavigationStack.Add(new ItemModel(new Item()));
                    //this.Frame.Navigate(typeof(MainPage), e);

                }
                catch (Exception ex) //catch (ServiceException exception)
                {
                    
                    Debug.WriteLine("AccountSelection - InitializeClient - exception: " + ex.Message);
                    await App.AddLogEntry("AccountSelection - InitializeClient - exception: " + ex.Message, false);
                    await p.k.DialogBoxResAsync("AccountSelection - InitializeClient - exception: " + ex.Message);

                    // TODO : error hadling

                    // RnD: Redirect to MainPage from here...
                    //rootFrame.Navigate(typeof(MainPage));//, e.Arguments);
                }

            }

            // RnD: Redirect to MainPage from here...
            //rootFrame.Navigate(typeof(MainPage));//, e.Arguments);

        }//SignInIfNeeded


        // ..

        void OnNavigationFailed(object sender, NavigationFailedEventArgs e)
        {
            throw new Exception($"Failed to load {e.SourcePageType.FullName}: {e.Exception}");
        }

        //private void OnSuspending(object sender, SuspendingEventArgs e)
        //{
        //    var deferral = e.SuspendingOperation.GetDeferral();
        //    //TODO: Save application state and stop any background activity
        //    deferral.Complete();
        //}

        //..
        static void ConfigureFilters(ILoggerFactory factory)
        {
            /*
            factory
                .WithFilter(new FilterLoggerSettings
                    {
                        { "Uno", LogLevel.Warning },
                        { "Windows", LogLevel.Warning },

						// Debug JS interop
						// { "Uno.Foundation.WebAssemblyRuntime", LogLevel.Debug },

						// Generic Xaml events
						// { "Windows.UI.Xaml", LogLevel.Debug },
						// { "Windows.UI.Xaml.VisualStateGroup", LogLevel.Debug },
						// { "Windows.UI.Xaml.StateTriggerBase", LogLevel.Debug },
						// { "Windows.UI.Xaml.UIElement", LogLevel.Debug },

						// Layouter specific messages
						// { "Windows.UI.Xaml.Controls", LogLevel.Debug },
						// { "Windows.UI.Xaml.Controls.Layouter", LogLevel.Debug },
						// { "Windows.UI.Xaml.Controls.Panel", LogLevel.Debug },
						// { "Windows.Storage", LogLevel.Debug },

						// Binding related messages
						// { "Windows.UI.Xaml.Data", LogLevel.Debug },

						// DependencyObject memory references tracking
						// { "ReferenceHolder", LogLevel.Debug },
					}
                )
#if DEBUG
                .AddConsole(LogLevel.Debug);
#else
                .AddConsole(LogLevel.Information);
#endif
            */
        }

        #endregion

        #region "BackButton"
        // PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
        private void OnNavigatedAddBackButton(object sender, NavigationEventArgs e)
        {
            var oFrame = sender as Frame;
            if (oFrame == null)
                return;

            Windows.UI.Core.SystemNavigationManager oNavig = Windows.UI.Core.SystemNavigationManager.GetForCurrentView();

            if (oFrame.CanGoBack)
                oNavig.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Visible;
            else
                oNavig.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Collapsed;
        }

        private void OnBackButtonPressed(object sender, Windows.UI.Core.BackRequestedEventArgs e)
        {
            try
            {
                if ((Windows.UI.Xaml.Window.Current.Content as Frame).CanGoBack)
                    (Windows.UI.Xaml.Window.Current.Content as Frame).GoBack();
                e.Handled = true;
            }
            catch
            {
                //
            }
        }
        #endregion

        public static string _timerString = "";
        public static int _timerCount = 0;

        // But what's the point? (???)
        //protected override void OnBackgroundActivated(BackgroundActivatedEventArgs args)
        //{
        //    var _task = args.TaskInstance;
        //    _timerCount++;
        //    _timerString = _timerString + DateTime.Now.ToString() + ", name=" + _task.Task.Name + "\n";
        //}


        // OnTimerActivated
        public static void OnTimerActivated()
        {
            _timerCount++;
            
            _timerString = _timerString + DateTime.Now.ToString() + ", STATIC\n";

        }//OnTimerActivated end


        // RemoteSystems, Timer
        protected override async void OnBackgroundActivated(BackgroundActivatedEventArgs args)
        {
            p.k.DebugOut("OnBackgroundActivated started");

            Windows.ApplicationModel.Background.IBackgroundTaskInstance _task = args.TaskInstance;
            _timerCount++;
            _timerString = _timerString + DateTime.Now.ToString() + ", name=" + _task.Task.Name + "\n";

            var moTaskDeferal = args.TaskInstance.GetDeferral(); // w pkarmodule.App

            if (args.TaskInstance.Task.Name == "Andro2UWP_Timer")
            {
                int iPreviusCnt = App.sToasts.Count;

                p.k.DebugOut("iPreviusCnt = " + iPreviusCnt.ToString());

                await LoadNews(true);//(false);

                int iNewCnt = App.sToasts.Count - iPreviusCnt;

                p.k.DebugOut("iCurrCnt = " + App.sToasts.Count.ToString());
                
                // RnD phase : >= 0;  Release phase - > 0
                if (iNewCnt > 0)
                {
                    //p.k.MakeToast(iNewCnt.ToString() + " new notifications from Android");

                    bool IsCreateToasts = p.k.GetSettingsBool("createToasts");
                    if (IsCreateToasts == true)
                    {
                        // Make Real Toast :)                         

                        p.k.MakeToast(iNewCnt.ToString() + " new notifications from Android");
                    }
                }

                // +++++++++++++++++++++++++++++++++++++++++++++++

               
                try
                {
                    if (!await App.LoadNews(true))
                    {
                        return;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("[ex] Exception: " + ex.Message);
                    //p.k.DialogBoxRes("[ex] RefreshList.Click Exception: " + ex.Message);

                    return;
                }

                // Refresh "toasts" list
                //MainPage.HitRefresh(); // ListView


                // +++++++++++++++++++++++++++++++++++++++++++++++

            }

            //' filelist komend danej aplikacji
            //Dim sLocalCmds As String = "add CHANNEL" & vbTab & "dodanie kanału"

            //' zwroci false gdy to nie jest RemoteSystem; gdy true, to zainicjalizowało odbieranie
            //If Not bObsluzone Then bNoComplete = RemSysInit(args, sLocalCmds)

            //if Not bNoComplete Then moTaskDeferal.Complete()
            moTaskDeferal.Complete();

        }//OnBackgroundActivated end 


        // LoadNews 
        public async static System.Threading.Tasks.Task<bool> LoadNews(bool bMsg)
        {
            p.k.DebugOut("LoadNews(" + bMsg.ToString());

            // First of all, read the dictionaries again (so that there was no dictionary reset!)
            if (!await initODandDict(bMsg))
            {
                
                return false;     
            }

            // ?
            await LoadNew(bMsg);

            return true;

        }//LoadNews end

        public static async System.Threading.Tasks.Task<bool> EnsureOneDriveOpen(bool bMsg)
        {
            if (!p.k.NetIsIPavailable(true))
            {
                p.k.DebugOut("EnsureOneDriveOpen - no IP network");
                return false;
            }

#if __ANDROID__
            /*
            if (App.gOnedrive != null)
                return true;

            await App.AddLogEntry("inicjalizacja gOneDrive", true);
            Uno.OneDrive.Connector.Init(Android.App.Application.Context);

            string[] scopes = { "Files.ReadWrite" };
            App.gOnedrive = new Uno.OneDrive.Connector
            (
               GoneDriveConsumerClientId,
               scopes
               );

            //RnD
            // await App.gOnedrive.DisconnectAsync();

            if (!await App.gOnedrive.ConnectAsync())
            {
                await App.AddLogEntry("FAIL initializing OneDrive", false);
                await p.k.DialogBoxResAsync("errOneDriveInit");
                return false;
            }

            if (App.gAppFolder is null)
            {
                // to jest to samo niezaleznie od on/off samego konektora
                await App.AddLogEntry("inicjalizacja gAppFolder", true);

                App.gAppFolder = await App.gOnedrive.GetThisAppFolderAsync();
            }
            */

            if (p.od.IsOneDriveOpened())
                return true;

            // if (!bMsg) return false;

            try
            {
                if (!await p.od.OpenOneDrive(true, bMsg))
                    return false;

                return true;
            }
            catch
            {
                //
            }
#else
            if (p.od.IsOneDriveOpened())
                return true;

            // if (!bMsg) return false;

            try
            {
                if (!await p.od.OpenOneDrive(true, bMsg))
                    return false;

                return true;
            }
            catch 
            {
            //
            }           
#endif

            p.k.DebugOut("EnsureOneDriveOpen - catch p.od.OpenOneDrive");
            return false;

        }//EnsureOneDriveOpen end


        // LoadFilterDictionary
        private static async System.Threading.Tasks.Task LoadFilterDictionary()
        {
            p.k.DebugOut("LoadFilterDictionary");

            string dictionaryFile = "";

#if __ANDROID__
            //dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "toasts.filters.txt");
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/toasts.filters.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/toasts.filters.txt");
#endif


            if (string.IsNullOrEmpty(dictionaryFile))
            {
                await App.AddLogEntry("No or empty toasts.filters.txt file", false);
            }
            else
            {
                App.glFilters.Clear();
                var dictEntries = dictionaryFile.Split('\n');
                foreach (string entry in dictEntries)
                {
                    if (!string.IsNullOrEmpty(entry))
                    {
                        var fields = entry.Split('|');
                        if (fields.GetUpperBound(0) == 2)
                        {
                            App.glFilters.Add(new App.JedenFiltr(fields[0].Trim(), fields[1].Trim(), fields[2].Trim()));
                            await App.AddLogEntry("Entry: '" + fields[0].Trim() + "', '" + fields[1].Trim() + "', '" + fields[2].Trim() + "'", true);
                        }
                    }

                }

                await App.AddLogEntry("Read " + App.glFilters.Count.ToString() + " toasts.filters entries", false);
            }
            // przeniesienie tego co uzywam z hardcoded do slownika (pozniej: do pliku)
            //App.glFilters.Add(new App.JedenFiltr("com.microsoft.skydrive", "Preparing...", ""));
            //App.glFilters.Add(new App.JedenFiltr("com.whatsapp", "", "Checking for new messages"));
            //App.glFilters.Add(new App.JedenFiltr("com.whatsapp", "", "WhatsApp Web is currently active"));
            //App.glFilters.Add(new App.JedenFiltr("com.google.android.music", "Downloading…", ""));
            //App.glFilters.Add(new App.JedenFiltr("com.google.android.apps.nbu.files", "", "Memes are taking up space"));
            //App.glFilters.Add(new App.JedenFiltr("android", "* is using battery", ""));
            //App.glFilters.Add(new App.JedenFiltr("com.android.vending", "* new updates", ""));
            //App.glFilters.Add(new App.JedenFiltr("com.microsoft.skydrive", "Backing up your photos...", ""));

        }//LoadFilterDictionary end


        // LoadDictionarySource
        private async static System.Threading.Tasks.Task LoadDictionarySource()
        {
            p.k.DebugOut("LoadDictionarySource");

            string dictionaryFile = "";
#if __ANDROID__
            //dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "sender.renames.txt");
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/sender.renames.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/sender.renames.txt");
#endif
            if (string.IsNullOrEmpty(dictionaryFile))
            {
                await App.AddLogEntry("No or empty sender.renames.txt file", false);
                return;
            }

            App.gdSenderRenames.Clear();

            var dictEntries = dictionaryFile.Split('\n');

            foreach (string entry in dictEntries)
            {
                if (!string.IsNullOrEmpty(entry))
                {
                    int ind = entry.IndexOf("|");
                    if (ind > 2)
                    {
                        App.gdSenderRenames.Add(entry.Substring(0, ind).Trim(), entry.Substring(ind + 1).Trim());
                        await App.AddLogEntry("Entry: '" + entry.Substring(0, ind).Trim() + "' » '" + entry.Substring(ind + 1).Trim() + "'", true);
                    }
                }

            }

            await App.AddLogEntry("Read " + App.gdSenderRenames.Count.ToString() + " sender.renames entries", false);

        }//LoadDictionarySource end


        private static async System.Threading.Tasks.Task<bool> CheckPkarFile()
        {
            p.k.DebugOut("CheckPkarFile");
            string dictionaryFile = "";
#if __ANDROID__
            //dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "pkar.mode.txt");
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/pkar.mode.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/pkar.mode.txt");
#endif
            if (string.IsNullOrEmpty(dictionaryFile)) return false;

            return true;
        }

        // initODandDict
        public static async System.Threading.Tasks.Task<bool> initODandDict(bool bMsg)
        {
            p.k.DebugOut("initODandDict(" + bMsg.ToString());

            
            //ProgresywnyRing(true);

            //if (bMsg) 
            //{
            //    p.k.ProgRingShow(true);
            //}

            /*
            // Ensure thet OneDrive is open ...
            if (!await EnsureOneDriveOpen(bMsg))
            {
                p.k.DebugOut("initODandDict - nie mam OneDrive");

                //ProgresywnyRing(false);

                if (bMsg)
                {
                    p.k.ProgRingShow(false);
                }

                return false;
            }
            */

            // Load only when connected to OneDrive
            await LoadDictionarySource(); // CAUTION: there is no progressring!

            // Load the Filter Dictionary (WczytajSlownikFiltrow)
            await LoadFilterDictionary();

            p.k.SetSettingsBool("pkarMode", await CheckPkarFile());

            // ProgresywnyRing(false);

            //if (bMsg)
            //{
            //    p.k.ProgRingShow(false);
            //}

            p.k.SetSettingsBool("wasInit", true);

            return true;

        }//initODandDict end


        // LoadNew
        private async static System.Threading.Tasks.Task LoadNew(bool bMsg)
        {
            p.k.DebugOut("LoadNew(" + bMsg.ToString());

            // RnD
            //if (!p.k.GetPlatform("uwp"))
            //{
            //    if (bMsg) await p.k.DialogBoxAsync("How did you press it not to be on UWP?");
            //    return;
            //}

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxAsync("errNoNetwork");
                return;
            }

            if (bMsg)
            {
                p.k.ProgRingShow(true);
            }

            // RnD: call on Android or.. not? 
            // load the list from OneDrive - for now on a button,
            // later maybe on a timer
            // (desktop: still online, phone - rarely)
            await ReadToastsList(bMsg);   // dir *toast.txt

            // RnD : Android is supported?
            // and their contents - from progressbar
            await ReadContents(bMsg);

            if (bMsg) 
            { 
                p.k.ProgRingShow(false); 
            }

        }//LoadNew end

        // ReadToastsList
        private static async System.Threading.Tasks.Task ReadToastsList(bool bMsg)
        {
            p.k.DebugOut("Read Toasts List");

            // two checks that should be done a long time ago (in the LoadNew function), but just in case
            //if (!p.k.GetPlatform("uwp"))
            //{
            //    if (bMsg) await p.k.DialogBoxAsync("jakim cudem nacisnales to nie bedac na UWP?");
            //    return;
            //}

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxResAsync("errNoNetwork");
                return;
            }

            // NOTE: for ANDROID - don't show the whole list of notifications (skip already sended toasts)
#if !__ANDROID__
            if (!p.od.IsOneDriveOpened())
            {
                await p.od.OpenOneDrive(true, bMsg);
            }

            System.Collections.ObjectModel.Collection<Microsoft.OneDrive.Sdk.Item> od_files =
                    await p.od.OneDriveGetAllChildsSDK("Apps/Andro2UWP/", false, true);

            // App.sToasts.Clear();

            if (od_files != null)
            { 
                foreach (var od_file in od_files)
                {
                    string fileNameData = od_file.Name;
                    string sTmp = "";

                    if (!fileNameData.EndsWith(".toast.txt"))
                    {
                        continue;   // this is not a toast file
                    }


                    // check if we have one already by accident - if so, we don't load it
                    bool bAlready = false;
                    foreach (var oldToast in App.sToasts)
                    {
                        if (oldToast.sFileName == fileNameData)
                        {
                            bAlready = true;
                            break;
                        }
                    }
                    if (bAlready)
                        continue;

                    var toast = new App.JedenToast();
                    toast.sFileName = fileNameData;

                    fileNameData = fileNameData.Replace(".toast.txt", "");

                    int iInd = fileNameData.LastIndexOf("-");
                    sTmp = fileNameData.Substring(iInd + 1); // sTmp == oItem.dDate.ToString("yyyy.MM.dd_HH.mm")
                    fileNameData = fileNameData.Substring(0, iInd);
                    toast.displayDate = sTmp.Replace("_", " "); // the file has an underline as a date and time separator
                    //public DateTimeOffset dDate; - not used for ListItems

                    iInd = fileNameData.LastIndexOf(".");
                    sTmp = fileNameData.Substring(iInd + 1); // sTmp == oItem.iNumber.ToString("00000")
                    int iNumber;
                    int.TryParse(sTmp, out iNumber);
                    toast.iNumber = iNumber;

                    toast.sDevice = fileNameData.Substring(0, iInd);
                    toast.displayDevice = "";   // for now, because only one; then you can add device ... in settings?

                    toast.sOneDriveFileId = od_file.Id;
                    toast.sSource = "TOBEREAD";

                    App.sToasts.Add(toast);
                }
            }
#endif
        }//


        // Read the Contents
        // ReadContents
        private static async System.Threading.Tasks.Task ReadContents(bool bMsg)
        {
            // two checks that should be done a long time ago (in the LoadNew function), but just in case
            //if (!p.k.GetPlatform("uwp"))
            //{
            //    if (bMsg) await p.k.DialogBoxAsync("How did you push it not to be on UWP?");
            //    return;
            //}

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxAsync("errNoNetwork");
                return;
            }

            int iToBeRead = 0;
            for (int iLp = 0; iLp < App.sToasts.Count; iLp++)
            {
                if (App.sToasts.ElementAt(iLp).sSource == "TOBEREAD")
                {
                    iToBeRead++;
                }
            }

            if (bMsg)
            { 
                p.k.ProgRingShow(true, false, 0, iToBeRead); 
            }

            if (bMsg)
            { 
                p.k.ProgRingVal(0); 
            }
            
            // RnD
            //uiProgBar.Maximum = iToBeRead;
            //uiProgBar.Value = 0;
            //uiProgBar.Visibility = Visibility.Visible;

#if !__ANDROID__
            if (!p.od.IsOneDriveOpened())
            {
                await p.od.OpenOneDrive(true, bMsg);
            }

            iToBeRead = 0;

            for (int iLp = 0; iLp < App.sToasts.Count; iLp++)
            {
                var toast = App.sToasts.ElementAt(iLp);

                if (toast.sSource == "TOBEREAD")
                {
                    toast.sMessage = await p.od.ReadOneDriveTextFileId(toast.sOneDriveFileId);

                    if (toast.sMessage != null)
                    {
                        string[] lines = toast.sMessage.Split('\n');

                        foreach (var line in lines)
                        {
                            // sendToUWP = sendToUWP + "Sender: " + e.PackageName + "\n";
                            if (line.StartsWith("Sender: "))
                            {
                                toast.sSource = line.Substring(8).Trim();
                                break;
                            }
                        }
                    }
                    else
                    {
                        toast.sMessage = "";
                        toast.sSource = "Unknown";
                    }

                    // uiProgBar.Value = ++iToBeRead;
                    if (bMsg) 
                    { 
                        p.k.ProgRingInc(); 
                    }
                }
            }
#endif
            if (bMsg)
            { 
                p.k.ProgRingShow(false); 
            }

            // RnD
            //uiProgBar.Visibility = Visibility.Collapsed;

        }//ReadContents end


        // OnActivated
        protected override void OnActivated(IActivatedEventArgs e)
        {
            Frame rootFrame;
            rootFrame = Window.Current.Content as Frame; // try to get a toast

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active

            if (rootFrame == null)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame();

                rootFrame.NavigationFailed += OnNavigationFailed;

                // Place the frame in the current Window
                Window.Current.Content = rootFrame;
            }

            if (rootFrame.Content == null)
            {

                //MakeDebugToast("OnActivated - OPEN NULL"); // TODO

                rootFrame.Navigate(typeof(MainPage));
            }

            Window.Current.Activate();

        }// OnActivated end


        
        #region "logfile"
        
        // GetLogFile
        public static async System.Threading.Tasks.Task<Windows.Storage.StorageFile> GetLogFile()
        {
            Windows.Storage.StorageFolder oFold = Windows.Storage.ApplicationData.Current.LocalFolder;
            return await oFold.CreateFileAsync("applog.txt", Windows.Storage.CreationCollisionOption.OpenIfExists);
        }//GetLogFile end


        // AddLogEntry
        public static async System.Threading.Tasks.Task AddLogEntry(string message, bool onlyInDebug)
        {
            p.k.DebugOut(2, message);
            System.Diagnostics.Debug.WriteLine("---PKAR--- " + message);

            if (onlyInDebug && !p.k.GetSettingsBool("debugLog"))
                return;

            Windows.Storage.StorageFile oFile = await GetLogFile();
            if (oFile is null) return;

            try
            {
                await Windows.Storage.FileIO.AppendTextAsync(
                    oFile, message + "\n", Windows.Storage.Streams.UnicodeEncoding.Utf8);
            }
            catch
            {
                // bo moze jak jest za szybko jedno po drugim, to robi sie deadlock, i Exception i dlatego czasem app przestaje dziaiałać?
            }

        }//AddLogEntry end


        #endregion

       static bool bInOneDriveSending = false;

    

        


        // WriteToast (to OneDrive)
        public async void WriteToast(JedenToast toast)
        {


            // RnD zone - start

            //string sAdd = DateTime.Now.ToString("HH:mm:ss") + " " + "Test Text" + "  " + "Test Msg" + "  ";

            //p.k.MakeToast(sAdd);

            // RnD zone - stop

#if __ANDROID__
                 
         
            // uzupelnij dane - mamy tylko czas i glowny tekst
            toast.sDevice = gsDeviceName;
            toast.iNumber = ++giCurrentNumber;

            p.k.SetSettingsInt("currentFileNum", giCurrentNumber);
            
            await AddLogEntry("next number: " + giCurrentNumber, true);

            sToasts.Add(toast);

            if (!p.k.NetIsIPavailable(false))
            {
                await AddLogEntry("no network present", false);
                return;
            }

            // check if we have the active sending (not ended yet)

            // protection against sending in parallel threads with a quick toast series
            if (bInOneDriveSending) return;

            bInOneDriveSending = true;


            // if there is a network, then we can send to OneDrive all that has not yet been sent
            for (int iLoop = 0; iLoop < sToasts.Count; iLoop++)
            {
                JedenToast oItem = sToasts.ElementAt(iLoop);

                // check if already sent
                if (oItem.bOnOneDrive) continue;    

                // before the save delay, so that the next quick toast does not try it again!
                oItem.bOnOneDrive = true;   

                oItem.sFileName = gsDeviceName + "." 
                    + oItem.iNumber.ToString("00000") + "-" 
                    + oItem.dDate.ToString("yyyy.MM.dd_HH.mm") 
                    + ".toast.txt";

                await AddLogEntry("filename: " + oItem.sFileName, false);

                // store file in device's local storage at first
                Windows.Storage.StorageFolder oFold = Windows.Storage.ApplicationData.Current.LocalFolder;
                
                Windows.Storage.StorageFile sFile = await oFold.CreateFileAsync
                (
                    oItem.sFileName, 
                    Windows.Storage.CreationCollisionOption.OpenIfExists
                );


                // -------------------------------------------------------------------------
                // Plan A                
                /*
                await AddLogEntry("Try to start saving OneDrive file...", false);

                string oSent = await p.od.SaveFileToOneDrive(
                    sFile, 
                    "Apps/Andro2UWP/",// onedrive special folder
                    oItem.sMessage);

                
                //string oSent = await p.od.CopyFileToOneDrive
                //(
                //    sFile,
                //    "Apps/Andro2UWP/",// onedrive special folder
                //    true//oItem.sMessage
                //);

                // RnD: TEST IT!!
                // if the sending failed, do not send the following
                if (oSent is null)
                {
                    await AddLogEntry("FAIL when saving file onto OneDrive! ", false);

                    //oItem.bOnOneDrive = false;  //  please note that you have not been able to send

                    //break;
                }
                else
                {
                    await AddLogEntry("Saving file onto OneDrive - ok! ", false);
                }
                */

                // **********************************************************************************
                // Plan B
                
                
                await AddLogEntry("Try to start renovating OneDrive toastfile...", false);

                bool oResult = false;

                try
                {
                    oResult = await p.od.ReplaceOneDriveFileContent
                    (
                        "Apps/Andro2UWP/" + oItem.sFileName,
                         oItem.sMessage //  "\n1\n2\n3"
                    );
                }
                catch (Exception ex)
                {
                    await AddLogEntry("[ex] ReplaceOneDriveFileContent exception: "+ ex.Message, false);
                    oResult = false;
                }

                if (oResult == false)
                {
                    await AddLogEntry("FAIL when renovating toastfile onto OneDrive!", false);

                    //oItem.bOnOneDrive = false;  // check that you have not been able to send

                    // RnD
                    oItem.bOnOneDrive = true;
                    bInOneDriveSending = false;

                    break;
                }
                else
                {
                    await AddLogEntry("Renovating toastfile onto OneDrive - ok! ", false);
                }
                

                // -------------------------------------------------------------------------

                oItem.bOnOneDrive = true;
            }

            bInOneDriveSending = false;
#endif
        }//WriteToast end

#if __ANDROID__

#region "handling accessiblity trigger"

        //<service>
        // <meta-data
        //  android:resource="@xml/service_config" />
        //  </service>
        // oraz plik service_config w katalogu....
        //    <accessibility-service
        //android:description="@string/accessibility_service_description"
        // https://developer.android.com/guide/topics/ui/accessibility/service
        ///>

        [Android.App.Service(Permission = "android.permission.BIND_ACCESSIBILITY_SERVICE")]
        [Android.App.IntentFilter(new String[] { "android.accessibilityservice.AccessibilityService" })]
        [Android.App.MetaData("android.accessibilityservice", Resource = "@xml/accessibilityserviceinfo")]
        public class AndroToast : Android.AccessibilityServices.AccessibilityService
        {

            private static string GlueString(string input, Android.OS.Bundle extras, string prefix, string extraName)
            {
                if (extras is null) return input;

                var appendix = extras.GetString(extraName);

                if (string.IsNullOrEmpty(appendix))
                    return input;   // nie ma co dodac - nie tracimy linii (\n)

                if (input.Contains(": " + appendix))
                    return input;   // ale to cos juz bylo zapisane (np. Title i TitleBig), wiec po co mnozyc dlugosc... 

                return input + prefix + ": " + appendix + "\n";
            }

            private static string GlueString(string input, string value, string prefix)
            {

                if (string.IsNullOrEmpty(value))
                    return input;   // nie ma co dodac - nie tracimy linii (\n)

                if (input.Contains(": " + value))
                    return input;   // ale to cos juz bylo zapisane (np. Title i TitleBig), wiec po co mnozyc dlugosc... 

                return input + prefix + ": " + value + "\n";
            }


            private static bool FiltrOdrzuca(string sPackageName, string sTitle, string sText)
            {
                AddLogEntry("toast: " + sPackageName + ", " + sTitle + ", "
                    + sText + ", versus " + glFilters.Count + " filtrów", true);

                foreach (var filtr in glFilters)
                {
                    AddLogEntry("probuje filtr: " + filtr.sPackageName + ", " + filtr.sTitle + ", " + filtr.sText, true);

                    if (!string.IsNullOrEmpty(filtr.sPackageName) && filtr.sPackageName != sPackageName) continue;
                    AddLogEntry("packagename ZGODNY", true);

                    if (!string.IsNullOrEmpty(filtr.sTitle))
                    {
                        if (filtr.sTitle.StartsWith("*"))
                        {
                            if (filtr.sTitle.EndsWith("*"))
                            {
                                if (!sTitle.Contains(filtr.sTitle.Substring(1, filtr.sTitle.Length - 2))) continue;
                                AddLogEntry("title match Contains", true);
                            }
                            else
                            {
                                if (!sTitle.EndsWith(filtr.sTitle.Substring(1))) continue;
                                AddLogEntry("title match EndsWith", true);
                            }
                        }
                        else
                        {
                            if (filtr.sTitle.EndsWith("*"))
                            {
                                if (!sTitle.StartsWith(filtr.sTitle.Substring(0, filtr.sTitle.Length - 1))) continue;
                                AddLogEntry("title match StartsWith", true);
                            }
                            else
                               if (filtr.sTitle != sTitle) continue;
                        }
                    }
                    AddLogEntry("title ZGODNY", true);

                    if (!string.IsNullOrEmpty(filtr.sText))
                    {
                        if (filtr.sText.StartsWith("*"))
                        {
                            if (filtr.sText.EndsWith("*"))
                            {
                                if (!sTitle.Contains(filtr.sText.Substring(1, filtr.sText.Length - 2))) continue;
                                AddLogEntry("text match Contains", true);
                            }
                            else
                            {
                                if (!sText.EndsWith(filtr.sText.Substring(1))) continue;
                                AddLogEntry("text match EndsWith", true);
                            }
                        }
                        if (filtr.sText.EndsWith("*"))
                            if (!sText.StartsWith(filtr.sText.Substring(0, filtr.sText.Length - 1))) continue;
                        if (filtr.sText != sText) continue;
                    }
                    AddLogEntry("text ZGODNY", true);

                    return true;
                }

                return false;
            }


            // Accessibility Event handler
            // OnAccessibilityEvent 
            public override void OnAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent e)
            {
                if (!App.gbCatch)
                {
                    AddLogEntry("\n*************************************************************", true);
                    AddLogEntry("It ignores, because of !App.gbCatch", true);
                    return;
                }

                AddLogEntry("\n*************************************************************", false);
                //AddLogEntry("Andro2UWP:App:OnAccessibilityEvent called");

                if (e.EventType != Android.Views.Accessibility.EventTypes.NotificationStateChanged)
                {
                    AddLogEntry("Ignored, because of !EventTypes.NotificationStateChanged", false);
                    return;
                }


                var androToast = (Android.App.Notification)e.ParcelableData;
                if (androToast is null)
                {

                    AddLogEntry("Ignored, because of !androToast (I mean messageBox?)", false);
                    return;
                }


                // tu ewentualnie mozna dodac filtrowanie toastów (np. z niechcianych senderów)

                JedenToast toastek = new JedenToast();
                
                toastek.dDate = DateTimeOffset.FromUnixTimeMilliseconds(androToast.When).ToLocalTime();
                // public string sSource; // czyżby tego się nie dało osiągnąć??
                // public string sMessage;

                // najpierw data nadejscia
                // Toast ma czas jako ms od ostatniego boot
                // https://stackoverflow.com/questions/55030433/android-accessibilityservice-geteventtime-time-format
                //long bootTime = Java.Lang.JavaSystem.CurrentTimeMillis() - Android.OS.SystemClock.ElapsedRealtime();
                //long eventMillis = bootTime + e.EventTime; // ale to jest zle - za mało! @4 II o 04:33 a nie rzeczywisty 22 II.
                //// bo ElapsedRealtime wlacza deep sleep, a SystemClock.uptimeMillis()) - nie wlacza deep sleep
                //eventMillis = Java.Lang.JavaSystem.CurrentTimeMillis() - e.EventTime;

                //string sendToUWP = "Notification @" + 
                //    DateTimeOffset.FromUnixTimeMilliseconds(eventMillis).ToString("dd-MM-yyyy HH:mm") + "\n\n";

                string sendToUWP = ""; // "Notification" + "\n\n"; - bez tego naglowka, bo po co...

                // ... która może być inna niż data wzięta z Notification
                if (string.IsNullOrEmpty(e.PackageName))
                {
                    toastek.sSource = "[no PackageName]";
                }
                else
                {
                    toastek.sSource = e.PackageName;
                }

                sendToUWP = sendToUWP + "Sender: " + toastek.sSource + "\n";
                sendToUWP = sendToUWP + "Date: " + toastek.dDate.ToString("dd-MM-yyyy HH:mm") + "\n";

                sendToUWP = GlueString(sendToUWP, androToast.Category, "Category");

                // 2021.07.18, ponieważ jakoby nie było pełnej informacji (np. fotka: że oddała na mnie głos, WhatsApp: treści powiadomień)
                string sEventText = ""; // "Event", bo z Event, a nie z Extras
                
                IList<Java.Lang.ICharSequence> lText = e.Text;
                
                if (lText != null)
                {
                    foreach (var sLine in lText)
                    {
                        sEventText = sEventText + sLine.ToString() + "\n";
                    }
                }

                // te dwa beda potem uzyte w filtrowaniu
                string sTitle = "";
                string sText = "";

                if (androToast.Extras != null)
                {
                    sTitle = androToast.Extras.GetString(Android.App.Notification.ExtraTitle);
                    if (sTitle is null)
                        sTitle = "";
                    sText = androToast.Extras.GetString(Android.App.Notification.ExtraText);
                    if (sText is null)
                        sText = "";

                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "BigText", Android.App.Notification.ExtraBigText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Conversation", Android.App.Notification.ExtraConversationTitle);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Info", Android.App.Notification.ExtraInfoText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Subtext", Android.App.Notification.ExtraSubText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Summary", Android.App.Notification.ExtraSummaryText);
                    sendToUWP = GlueString(sendToUWP, sText, "Text");
                    sendToUWP = GlueString(sendToUWP, sTitle, "Title");
                    sendToUWP = GlueString(sendToUWP, sEventText, "EventText");


                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "TitleBig", Android.App.Notification.ExtraTitleBig);
                    if (androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines) != null)
                    {
                        foreach (string str in androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines))
                        {
                            sendToUWP = sendToUWP + "Line: " + str + "\n";
                        }
                    }
                }
                else
                    AddLogEntry("androToast.Extras is null", true);

                AddLogEntry("nowy toast:\n" + sendToUWP + "\n<end>", false);


                // te są zapisywane w WriteToast
                //public string sDevice;
                //public int iNumber;
                //public string sFileName;
                //public bool bOnOneDrive;

                // te są uzupełniane dopiero do wyświetlenia (z mainpage)
                //public string displayDate;
                //public string displayDevice;

                toastek.sMessage = sendToUWP;

                // drugie miejsce filtrowania

                //AddLogEntry("starting comparing, e.PackageName='" + e.PackageName + "', sTitle='" + sTitle + "'");

                // e.g. 
                //Text: Tap for details on battery and data usage
                //Title: OneDrive is using battery

                //Sender: com.android.vending
                //Date: 26 - 02 - 2020 08:05
                //Category: status
                //BigText: 34 updates total are pending
                //Title: 5 new updates

                //if (e.PackageName == "android" && sTitle.Contains(" is using battery") ||
                //    e.PackageName == "com.android.vending" && sTitle.Contains(" new updates") )
                //{
                //    AddLogEntry("ale podjalem decyzje zeby tego nie zapisywac (internal filter");
                //    return;
                //}

                if (FiltrOdrzuca(e.PackageName, sTitle, sText))
                {
                    AddLogEntry("ale mam to odfiltrować (plik filtrów)", false);
                    return;
                }

                // ponizsze są w pliku filtrów (a przynajmniej jego emulacji)
                //if (e.PackageName == "com.microsoft.skydrive" && sTitle == "Preparing...")
                //    bOk = false;

                //if (e.PackageName == "com.whatsapp")
                //{
                //    if (sText == "Checking for new messages" || sText == "WhatsApp Web is currently active")
                //        bOk = false;
                //}

                //if (e.PackageName == "com.google.android.music")
                //{
                //    if (sTitle == "Downloading…")
                //        bOk = false;
                //}

                ((App)App.Current).WriteToast(toastek);

                //bad case
                //MainPage.ListRefresh();
                // RnD: Redirect to MainPage from here...
                //Frame 
                Frame rootFrame = Window.Current.Content as Frame;

                // 
                // just ensure that the window is active
                if (rootFrame != null)
                {
                    rootFrame.Navigate(typeof(MainPage));//, e.Arguments);
                }

            }//OnAccessibilityEvent end



            // TEMP
            // GenerateTestToastEvent
            public static void GenerateTestToastEvent()
            {
                //if (!App.gbCatch)
                //{
                //    AddLogEntry("\n*************************************************************", true);
                //    AddLogEntry("It ignores, because of !App.gbCatch", true);
                //    return;
                //}

                AddLogEntry("\n*************************************************************", false);
                AddLogEntry("\nAndro2UWP:App:GenerateTestToastEvent called", false);



                Android.App.Notification androToast = new Android.App.Notification();

                // RnD
                androToast.Category = "Experimental";


                //if (androToast is null)
                //{
                //    AddLogEntry("Ignored, because of !androToast (I mean messageBox?)", false);
                //    return;
                //}


                // tu ewentualnie mozna dodac filtrowanie toastów (np. z niechcianych senderów)

                JedenToast toastek = new JedenToast();

                toastek.dDate = DateTimeOffset.FromUnixTimeMilliseconds(androToast.When).ToLocalTime();
               
                //string sendToUWP = "Notification @" + 
                //    DateTimeOffset.FromUnixTimeMilliseconds(eventMillis).ToString("dd-MM-yyyy HH:mm") + "\n\n";

                string sendToUWP = "Notification" + "\n\n"; // ""

                // ... która może być inna niż data wzięta z Notification
                toastek.sSource = "[no PackageName]";
                

                sendToUWP = sendToUWP + "Sender: " + toastek.sSource + "\n";
                sendToUWP = sendToUWP + "Date: " + toastek.dDate.ToString("dd-MM-yyyy HH:mm") + "\n";

                sendToUWP = GlueString(sendToUWP, androToast.Category, "Category");

                
                string sEventText = ""; // 

                string[] lText = { "line1","line2","line3"};
                //lText[0] = "TEST TEST TEST Text";

                if (lText != null)
                {
                    foreach (var sLine in lText)
                    {
                        sEventText = sEventText + sLine.ToString() + "\n";
                    }
                }

                string sTitle = "";
                string sText = "";

                if (androToast.Extras != null)
                {
                    sTitle = androToast.Extras.GetString(Android.App.Notification.ExtraTitle);
                    if (sTitle is null)
                        sTitle = "";
                    sText = androToast.Extras.GetString(Android.App.Notification.ExtraText);
                    if (sText is null)
                        sText = "";

                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "BigText", Android.App.Notification.ExtraBigText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Conversation", Android.App.Notification.ExtraConversationTitle);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Info", Android.App.Notification.ExtraInfoText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Subtext", Android.App.Notification.ExtraSubText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Summary", Android.App.Notification.ExtraSummaryText);
                    sendToUWP = GlueString(sendToUWP, sText, "Text");
                    sendToUWP = GlueString(sendToUWP, sTitle, "Title");
                    sendToUWP = GlueString(sendToUWP, sEventText, "EventText");


                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "TitleBig", Android.App.Notification.ExtraTitleBig);
                    if (androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines) != null)
                    {
                        foreach (string str in androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines))
                        {
                            sendToUWP = sendToUWP + "Line: " + str + "\n";
                        }
                    }
                }
                else
                {
                    AddLogEntry("androToast.Extras is null", true);
                }

                AddLogEntry("New test toast:\n" + sendToUWP + "\n<end>", false);



                toastek.sMessage = sendToUWP;

                
                //RnD
                if (FiltrOdrzuca("[no PackageName]", sTitle, sText))
                {
                    AddLogEntry("ale mam to odfiltrować (plik filtrów)", false);
                    return;
                }
               

                ((App)App.Current).WriteToast(toastek);

            }//GenerateTestToastEvent end



            public override void OnInterrupt()
            {
                AddLogEntry("Andro2UWP:App:OnInterrupt called!!!!!", true);
            }

            protected override void OnServiceConnected()
            {
                AddLogEntry("Andro2UWP:App:OnServiceConnected called", true);
                base.OnServiceConnected();

                var servInfo = new Android.AccessibilityServices.AccessibilityServiceInfo();
                servInfo.EventTypes = Android.Views.Accessibility.EventTypes.NotificationStateChanged;
                servInfo.FeedbackType = Android.AccessibilityServices.FeedbackFlags.Generic;
                servInfo.Flags = Android.AccessibilityServices.AccessibilityServiceFlags.Default;
                // (a) deprecated (b) read-only
                //servInfo.Description = "If you want me to send Notifications to OneDrive (to UWP companion app), I need access to Notifications :)";
                //servInfo.NotificationTimeout = 100;
                // servInfo.PackageNames = null;   // all packages

                SetServiceInfo(servInfo);
            }

            public override bool OnUnbind(Android.Content.Intent intent)
            {
                AddLogEntry("Andro2UWP:App:OnUnbind called", true);
                return false;
            }
        }

#endregion

#endif // if _ANDROID_

        // JedenToast class 
        public class JedenToast
        {
            public string sDevice { get; set; }
            public DateTimeOffset dDate { get; set; }
            public string sSource { get; set; }
            public string sMessage { get; set; }
            public string sFileName { get; set; }
            public int iNumber { get; set; }
            public bool bOnOneDrive { get; set; }
            public string displayDate { get; set; }
            public string displayDevice { get; set; }
            public string displaySource { get; set; }
            public string sOneDriveFileId { get; set; }

            // ToStringDebug
            public string ToStringDebug()
            {
                string sTxt = ToString();
                sTxt += "\nDebug data:\n";
                sTxt += "Device: " + sDevice + "\n";
                sTxt += "Date: " + dDate.ToString("yyyy.MM.dd HH:mm:ss") + "\n";
                sTxt += "Source: " + sSource + "\n";
                sTxt += "FileNameDevice: " + sFileName + "\n";
                sTxt += "Number: " + iNumber + "\n";
                sTxt += "OneDriveFileId: " + sOneDriveFileId + "\n";
                sTxt += "bOnOneDrive: " + bOnOneDrive + "\n";
               
                return sTxt;

            }//ToStringDebug end


            // ToString
            public override string ToString()
            {
                string sTxt = "";
                if (!string.IsNullOrEmpty(displayDevice)) sTxt += "Device: " + displayDevice + "\n";
                if (!string.IsNullOrEmpty(displayDate)) sTxt += "Date: " + displayDate + "\n";
                if (!string.IsNullOrEmpty(displaySource)) sTxt += "Source: " + displaySource + "\n";
                if (!string.IsNullOrEmpty(sMessage)) sTxt += "Message:\n" + sMessage + "\n";
                
                return sTxt;

            }//ToString end

        }//JedenToast class end


        // JedenFiltr class
        public class JedenFiltr
        {
            public string sPackageName { get; set; }
            public string sTitle { get; set; }
            public string sText { get; set; }

            public JedenFiltr(string packageName, string title, string text)
            {
                sPackageName = packageName;
                sTitle = title;
                sText = text;
            }

        }//JedenFiltr class end

    }// App partial class end

}//namespace end
